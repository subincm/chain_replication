import sys
import random
import logging
from time import sleep

exec("from %s import *" % sys.argv[3], globals())

class Server(process):
    def setup(servers_set, bank_name, index, master):
        self.startup_delay = server_conf[bank_name][index]['startup_delay']
        self.rcv_lifetime  = server_conf[bank_name][index]['rcv_lifetime']
        self.snd_lifetime  = server_conf[bank_name][index]['snd_lifetime']
        self.heartbeat_interval = server_conf[bank_name][index]['heartbeat_interval']
        self.client_update_req = False
        self.syncing_with_tail = False
        self.query_req = False
        self.server_propagate_req = False
        self.ack_resp = False
        self.history_list = []
        self.query_queue = []
        self.update_queue = []
        self.sent_queue = []
        self.ack_queue = []
        self.propagate_queue = []
        self.servers = list(servers_set)
        self.recv_seq_no = 0
        self.send_seq_no = 0
        self.server_name = bank_name+'.'+str(server_conf[bank_name][index]['index'])
        self.seq = 0
        self.last_seen_update_seq = 0
        self.head = servers[0]
        self.tail = servers[-1]
        self.state_active = True
        self.new_server = None
        self.update_index = 0
        self.update_history_in_progress = False
        self.initialize = True
        
        if server_conf[bank_name][index]['rcv_lifetime'] == 'random':
            self.rcv_lifetime = random.randint(50,100)
        else:
            self.rcv_lifetime = server_conf[bank_name][index]['rcv_lifetime']

        if server_conf[bank_name][index]['snd_lifetime'] == 'random':
            self.send_lifetime = random.randint(50,100)
        else:
            self.send_lifetime = server_conf[bank_name][index]['snd_lifetime']
        
        output(server_name,'Receive Lifetime =',self.rcv_lifetime, 'Send Lifetime =', self.send_lifetime)

    def get_balance(request):
        """ request format=(UID, account_number)
            returns (UID, account_number, 'Processed', balance)
        """
        account_data = [item for item in self.history_list if item[1][1] == request[1]]
       
        if account_data:
            return (request[0], request[1], 'Processed', account_data[-1][1][2])
        else:
            return (request[0], request[1], 'Processed', 0) 

    def handle_queries():
        for entry in list(self.query_queue):
            #Reply back to the client
            self.send_seq_no+=1
            response = ('response', get_balance(entry[0]),)
            output(server_name,'SENT:',self.send_seq_no,': ', response,' to', str(entry[-1]))
            send(response, to=entry[-1])

            #Now, remove the entry
            self.query_queue.remove(entry)
        
    def receive(msg=('getBalance',request), from_=client):
        #If I am the tail, respond back
        self.recv_seq_no+=1
        if self.id == self.tail:
            output(server_name,'RECEIVED:',self.recv_seq_no,': ',str(request), ' from', str(client))

            #store the query in the query queue
            queue_entry = [request, client]
            self.query_queue.append(queue_entry)
            
            #wake up main()
            self.query_req = True
        else:
            #not the tail, purge the message
            del(request)
    
    def handle_update_propagate_request(update):
        if update:
            current_queue = self.update_queue
        else:
            current_queue = self.propagate_queue

        for i, entry in enumerate(list(current_queue)):
            
            self.send_seq_no+=1
            if(self.tail != self.id):
                #One of the chain servers, propagate to the next
                
                self.send_seq_no+=1
                propagate = ('propagate', entry) 
                output(server_name,'SENT:',self.send_seq_no,': ', propagate,' to', str(servers[index+1]))
                send(propagate, to=servers[index+1])
                
                #Add to the Sent Queue
                self.sent_queue.append(entry)
            else:
                #Tail Processing
                # Duplicate request case
                dup_req = [item for item in self.history_list if item[1][0] == entry[2][0] and item[1][1] == entry[2][1]]
                if dup_req:
                    # The Update Type and the Amount Should match
                    consistent_hist = [item for item in dup_req if item[1][2] == entry[2][2] and \
                                                                    item[0] == entry[1]]
                    if consistent_hist:
                        response = (entry[2][0], entry[2][1], 'Processed', entry[2][2])
                        output(server_name,'SENT:',self.send_seq_no,': ', response,' to', str(entry[-1]))
                        send(('response', response), to=entry[-1])
                    else:
                        response = (entry[2][0], entry[2][1], 'Inconsistent With History',dup_req[-1][1][2])
                        output(server_name,'SENT:',self.send_seq_no,': ', response,' to', str(entry[-1]))
                        send(('response', response), to=entry[-1])
                else: 
                    #Find all with the given Account number
                    existing_entry = [item for item in self.history_list if item[1][1] == entry[2][1]]
                    
                    if existing_entry:
                        #Deposit Case, Find the latest deposit and obtain the new balance
                        if entry[1] == 'deposit':
                            mutable_entry = list(entry[2])
                            mutable_entry[2] += existing_entry[-1][1][2]
                            self.history_list.append(('deposit', tuple(mutable_entry)))
                            
                            response = (mutable_entry[0], mutable_entry[1], 'Processed', mutable_entry[2])
                            output(server_name,'SENT:',self.send_seq_no,': ', response,' to', str(entry[-1]))
                            send(('response', response), to=entry[-1])
                        else:
                            # Withdrawal case, Sufficient Funds
                            if entry[2][2] <= existing_entry[-1][1][2]:
                                mutable_entry = list(entry[2])
                                mutable_entry[2] = existing_entry[-1][1][2] - entry[2][2]
                                self.history_list.append(('withdraw', tuple(mutable_entry)))
                            
                                response = (mutable_entry[0], mutable_entry[1], 'Processed', mutable_entry[2])
                                output(server_name,'SENT:',self.send_seq_no,': ', response,' to', str(entry[-1]))
                                send(('response', response), to=entry[-1])
                            else:
                                # Withdrawal case, Insufficient Funds
                                response =  (entry[2][0], entry[2][1], 'Insufficient Funds', \
                                                existing_entry[-1][1][2])
                                output(server_name,'SENT:',self.send_seq_no,': ', response,' to', str(entry[-1]))
                                send(('response', response), to=entry[-1])
                    else:
                        # Deposit case, new Account
                        if entry[1] == 'deposit':
                            self.history_list.append((entry[1],entry[2]))
                            response =  (entry[2][0], entry[2][1], 'Processed', entry[2][2])
                            output(server_name,'SENT:',self.send_seq_no,': ', response,' to', str(entry[-1]))
                            send(('response', response), to=entry[-1])
                        else:
                            # Withdrawal case, no Account
                            response =  (entry[2][0], entry[2][1], 'Insufficient Funds', 0)
                            output(server_name,'SENT:',self.send_seq_no,': ', response,' to', str(entry[-1]))
                            send(('response', response), to=entry[-1])
                if 0 != index:
                    self.send_seq_no+=1
                    ack = ('ack', (entry[0], entry[1], response))
                    output(server_name,'SENT:',self.send_seq_no,': ', ack,' to', str(servers[index-1]))
                    send(ack, to=servers[index-1])

            current_queue.remove(entry)                    
        output(server_name,'History:\n', self.history_list) 
    
    def receive(msg=('deposit', request), from_=client):
        self.recv_seq_no+=1
        output(server_name,'RECEIVED:',self.recv_seq_no,': ( deposit,',request, ') from', str(client))

        seq += 1
        #store the update in the update queue
        queue_entry = [seq, 'deposit', request, client]
        self.update_queue.append(queue_entry)
            
        #wake up main()
        self.client_update_req = True

    def receive(msg=('withdraw',request), from_=client):
        self.recv_seq_no+=1
        output(server_name,'RECEIVED:',self.recv_seq_no,': ( withdraw,' ,request, ') from', str(client))

        seq += 1
        #store the query in the query queue
        queue_entry = [seq, 'withdraw', request, client]
        self.update_queue.append(queue_entry)
           
        #wake up main()
        self.client_update_req = True

    def receive(msg=('ack',request), from_=next):
        self.recv_seq_no+=1
        output(server_name,'RECEIVED:',self.recv_seq_no,': ( ack,',request, ') from', str(next))
        
        #store the query in the ack queue
        self.ack_queue.append(request)
            
        #wake up main()
        self.ack_resp = True 
        
    def receive(msg=('propagate', request), from_=server):
        self.recv_seq_no+=1
        output(server_name,'RECEIVED:',self.recv_seq_no,': ( propagate,',request, ') from', str(server))
        #store the query in the propagate queue
        self.propagate_queue.append(request)

        self.last_seen_update_seq = request[0]
            
        #wake up main()
        self.server_propagate_req = True

    def receive(msg=('sync', request), from_=server):
        """Routine to Send Inflight Updates to S+
        """
        self.recv_seq_no+=1
        output(server_name,'RECEIVED:',self.recv_seq_no,': ( sync: seq.no =',request, ') from', str(server))
       
        #Find Inflight Updates and resend them
        inflight_reqs = [item for item in self.sent_queue if item[0] > request]
        
       
        if inflight_reqs:
            inflight_reqs.sort()
            output(server_name,"Resend List = ", inflight_reqs)

            for entry in inflight_reqs:
                self.send_seq_no+=1
                propagate = ('propagate', entry) 
                output(server_name,'SENT:',self.send_seq_no,': resend', propagate,' to', str(servers[index+1]))
                send(propagate, to=servers[index+1])

    def receive(msg=('server_fail', request), from_=master):
        """ Handle Server Fail messages from the Master
        """
        output(server_name,'RECEIVED: server_fail', request, 'from Master', master)
        if (self.id == request[0]):
            output(server_name,'Master thinks I am dead, killing self..')
            exit(0)

        #If I am still inactive, just update my servers list and return
        if self.state_active == False:
            servers.remove(request[0])
            self.head = request[1]
            self.tail = request[2]
            return
            
        is_failed_pred = False
        if (index != 0 and request[0] == servers[index-1]):
            is_failed_pred = True
        
        #is_failed_succ = False
        #if (index < len(servers)-1 and request[0] == servers[index+1]):
        #    is_failed_succ = True

        internal_failure = True
        #If I weren't the head earlier, but Master says I am now,
        #It means that my predecessor who was the Head died
        if (self.id != self.head and self.id == request[1]):
            seq = self.last_seen_update_seq
            internal_failure = False
       
        new_tail = False
        #If I weren't the Tail earlier, but Master says I am now,
        #It means that my successor who was the tail died
        if (self.id != self.tail and self.id == request[2]):
            new_tail = True
            
        #Update Head & Tail 
        self.head = request[1]
        self.tail = request[2]
        
        servers.remove(request[0])
        
        #Recalculate Indices
        for i, elem in enumerate(servers):
            if (elem == self.id):
                self.index = i
                break

        output(server_name,"After Re-org, servers =", servers, "Index =", index)
        
        #If I am the new tail, start acting like one.
        if (new_tail):
            internal_failure = False
            while  (self.sent_queue != []):
                output(server_name,"remaining Sent Queue =", self.sent_queue)
                self.propagate_queue.append(self.sent_queue.pop(0))

            #wake up main()
            self.server_propagate_req = True
        
        #Send Sync message to S-
        if (internal_failure == True):
            if is_failed_pred == True:
                self.send_seq_no+=1
                sync_msg = ('sync', self.last_seen_update_seq)
                output(server_name,'SENT:',self.send_seq_no,': ', sync_msg, 'to', str(servers[index-1]))
                send(sync_msg, to=servers[index-1])

        output("Sent Queue in Server Fail =", self.sent_queue)

    def handle_ack_responses(): 
        """Routine to Handle ACK responses from the Successor Node
        """
        
        for request in list(self.ack_queue):
            #Handle Lost ACK case
            lost_acks = [item for item in self.sent_queue if item[0] < request[0]]
            
            output("lost ACKs = ", lost_acks)

            if lost_acks:
                lost_acks.sort()
            
                for entry in lost_acks:
                
                    # Duplicate request case
                    dup_req = [item for item in self.history_list if item[1][0] == entry[2][0] and \
                                                                        item[1][1] == entry[2][1]]
                    if dup_req:
                        # The Update Type and the Amount Should match
                        consistent_hist = [item for item in dup_req if item[1][2] == entry[2][2] and \
                                                                    item[0] == entry[1]]
                        if consistent_hist:
                            response = (entry[2][0], entry[2][1], 'Processed', entry[2][2])
                        else:
                            response = (entry[2][0], entry[2][1], 'Inconsistent With History',dup_req[-1][1][2])
                    else: 
                        #Find all with the given Account number
                        existing_entry = [item for item in self.history_list if item[1][1] == entry[2][1]]
                    
                        if existing_entry:
                            #Deposit Case, Find the latest deposit and obtain the new balance
                            if entry[1] == 'deposit':
                                mutable_entry = list(entry[2])
                                mutable_entry[2] += existing_entry[-1][1][2]
                                self.history_list.append(('deposit', tuple(mutable_entry)))
                            
                                response = (mutable_entry[0], mutable_entry[1], 'Processed', mutable_entry[2])
                            else:
                                # Withdrawal case, Sufficient Funds
                                if entry[2][2] <= existing_entry[-1][1][2]:
                                    mutable_entry = list(entry[2])
                                    mutable_entry[2] = existing_entry[-1][1][2] - entry[2][2]
                                    self.history_list.append(('withdraw', tuple(mutable_entry)))
                            
                                    response = (mutable_entry[0], mutable_entry[1], 'Processed', mutable_entry[2])
                                else:
                                    # Withdrawal case, Insufficient Funds
                                    response =  (entry[2][0], entry[2][1], 'Insufficient Funds', \
                                                existing_entry[-1][1][2])
                        else:
                            # Deposit case, new Account
                            if entry[1] == 'deposit':
                                self.history_list.append((entry[1],entry[2]))
                                response =  (entry[2][0], entry[2][1], 'Processed', entry[2][2])
                            else:
                                # Withdrawal case, no Account
                                response =  (entry[2][0], entry[2][1], 'Insufficient Funds', 0)
                    
                    if 0 != index:
                        self.send_seq_no+=1
                        ack = ('ack', (entry[0], entry[1], response))
                        output(server_name,'SENT:',self.send_seq_no,': ', ack,' to', str(servers[index-1]))
                        send(ack, to=servers[index-1])

                    #Remove from the Sent Queue
                    self.sent_queue.remove(entry)                    
                
        for request in list(self.ack_queue):
            #Find this entry in Sent Queue and move it to History queue
            def findMatch(candidate):
                return request[0] == candidate[0] and request[1] == candidate[1] \
                and request[2][0] == candidate[2][0]  and request[2][1] == candidate[2][1]
            try:
                entry = tuple(filter(findMatch, self.sent_queue))[0]
            except Exception:
                #Now, remove the entry from the ack queue
                output(server_name,'Found Stray ACK:', request,' ignoring')
                self.ack_queue.remove(request)
                return
            
            self.sent_queue.remove(entry)

            #Now, remove the entry from the ack queue
            self.ack_queue.remove(request)
            
            #Add to History only if processing was successful
            if request[2][2] == 'Processed':
                #Add to History iff the balance is different
                dup_req = [item for item in self.history_list if item[1][1] == request[2][1]]
                hist_entry = (request[1], (request[2][0], request[2][1], request[2][3]))
                if dup_req:
                    if dup_req[-1][1][2] != request[2][3]:
                        self.history_list.append(hist_entry)
                else:
                    self.history_list.append(hist_entry)
                        
            if 0 != index:
                self.send_seq_no+=1
                ack = ('ack', request)
                output(server_name,'SENT:',self.send_seq_no,': ', ack,' to', str(servers[index-1]))
                send(('ack', request), to=servers[index-1])
            
        output(server_name, "History After ACK receipt is", self.history_list)

    def receive(msg=('purge_req', request), from_=master):
        """Routine to Purge the partial Update in the *To be added Server* if the current tail failed
        """
        self.recv_seq_no+=1
        output(server_name,'RECEIVED:',self.recv_seq_no,': ( purge_req:',request, ') from', master)

        #Purge the History, wait for sync
        self.history_list = []

    def receive(msg=('sync_new_tail',request), from_=master):
        """Start Syncing History with the new Server
        """
        self.recv_seq_no+=1
        output(server_name,'RECEIVED:',self.recv_seq_no,': ( sync_new_tail,' ,request, ') from', master)
        self.update_index = 0
        self.new_server = request
        
        #wakeup main
        self.update_history_in_progress = True

    def handle_update_history_sends():
        length = len(self.history_list)
        if (self.update_index <= length):
            self.send_seq_no+=1
            update_history = ('update_history', self.history_list[self.update_index])
            output(server_name,'SENT:',self.send_seq_no,': ', update_history, ' to', self.new_server)
            send(update_history, to=self.new_server)

        self.update_index += 1

        #If we are done updating the History
        if (self.update_index == length):
            self.update_history_in_progress = False
            
            # 1. Send 'sent_done' msg to New Server
            self.send_seq_no+=1
            sent_done = ('sent_done',)
            output(server_name,'SENT:',self.send_seq_no,': sent_done: to', self.new_server)
            send(sent_done, to=self.new_server)
        
            # 2. Stop being the tail
            self.tail = self.new_server
            self.servers.append(self.new_server)
            self.new_server= None
    
    def receive(msg=('update_history',request), from_=server):
        """Keep adding to our history List
        """
        self.recv_seq_no+=1
        if (self.recv_seq_no == self.rcv_lifetime):
            output(server_name,"Server Recv Lifetime Exceeded, Killing Self..")
            exit(0);
        output(server_name,'RECEIVED:',self.recv_seq_no,': ( Update History,' ,request, ') from', server)
        self.history_list.append(request)
    
    def receive(msg=('sent_done',), from_=server):
        """The current tail has Sent us everything we need to start acting like a tail
           Inform Master that I am the new tail and start acting like one
        """
        self.recv_seq_no+=1
        output(server_name,'RECEIVED:',self.recv_seq_no,': ( Sent Done ) from', server)
        servers.append(self.id)
        self.tail = self.id
        
        self.state_active = True

        output(server_name,"Updated History of New Tail =", self.history_list)

        output(server_name, 'Informing Master', master, 'that I am the new tail')
        send(('new_tail_ready',), to = master)

    def receive(msg=('add_new_tail',req), from_=master):
        """The new tail has taken over, update the server list and the tail
        """
        output(server_name, '#RECEIVED: ', 'add_new_tail:', req, ' from Master ', master)
        if (tail!= req):
            output(server_name, 'Added new tail =', req)
            servers.append(req)
            tail = req
        else:
            output(server_name, 'Current Tail has already new tail')

    def receive(msg=('new_tail_fail',req), from_=master):
        """The new tail has failed before taking over, update the server list and the tail
        """
        output(server_name, '#RECEIVED: ', 'new_tail_fail:', req, ' from Master ', master)
        if (tail == req):
            
            output(server_name, 'Getting back to being Tail', self.id)
            servers.remove(req)
            tail = self.id
            while  (self.sent_queue != []):
                output(server_name,"remaining Sent Queue =", self.sent_queue)
                self.propagate_queue.append(self.sent_queue.pop(0))

            #wake up main()
            self.server_propagate_req = True
        else:
            output(server_name, 'Stop History Propagation')
            self.update_history_in_progress = False
    
    def receive(msg=('servers_list',req), from_=master):
        """Inform the new server of our current server List, so that it has the latest 
           info and can re-organise the server list in response to a serv_fail event.
        """
        output(server_name, '#RECEIVED: ', 'servers_list:', req, ' from Master ', master)
        servers = req
        self.head = servers[0]
        self.tail = servers[-1]
        self.initialize = True
        output(server_name, 'Current Server List =', servers)

    def receive(msg=(_,), from_=p):
        self.recv_seq_no+=1
        output(server_name,'RECEIVED:', self.recv_seq_no,':', 'Unknown message from ', str(p),' ,discarding..')
    
    def main():
        if (self.startup_delay):
            output(server_name, 'Sleeping for ', self.startup_delay, 'seconds')
            self.state_active = False
            sleep(self.startup_delay)
            self.initialize = False

        while True:
            -- l
            if await(self.client_update_req or self.query_req or self.ack_resp or self.server_propagate_req or self.update_history_in_progress):
                if (self.initialize == False):
                    self.client_update_req = False
                    self.syncing_with_tail = False
                    self.query_req = False
                    self.server_propagate_req = False
                    self.ack_resp = False
                    self.history_list = []
                    self.query_queue = []
                    self.update_queue = []
                    self.sent_queue = []
                    self.ack_queue = []
                    self.propagate_queue = []

                if (self.recv_seq_no+1 == self.rcv_lifetime):
                   output(server_name,"Server Recv Lifetime Exceeded, Killing Self..")
                   return;
                if (self.send_seq_no == self.rcv_lifetime):
                   output(server_name,"Server Send Lifetime Exceeded, Killing Self..")
                   return;
               
                if (self.client_update_req):
                   output(server_name,"Handle Client Updates")
                   handle_update_propagate_request(True)
                   self.client_update_req = False
                elif (self.query_req):
                   output(server_name,"Handle Client Queries")
                   handle_queries()
                   self.query_req = False
                elif (self.ack_resp):
                   output(server_name,"Handle ACK responses")
                   handle_ack_responses()
                   self.ack_resp = False
                elif (self.server_propagate_req):
                   output(server_name, "Handle Propagate requests")
                   handle_update_propagate_request(False)
                   server_propagate_req = False
                elif (self.update_history_in_progress):
                   output(server_name, "Updating History in Progress")
                   handle_update_history_sends()
            elif timeout(self.heartbeat_interval):
                output(server_name, "Send Heartbeat msg to", master)
                send(('heartbeat',), to = master)

class Client(process):
    def setup(servers_set, bank_name, index, master):
        self.client_time_out = client_conf[bank_name][index]['client_time_out']
        self.num_retransmits  = client_conf[bank_name][index]['num_retransmits']
        self.account_no  = client_conf[bank_name][index]['account_no']
        self.msg_loss_freq  = client_conf[bank_name][index]['msg_loss_freq']
        # setup a sequence number for the client
        self.seq_no = random.randint(1000, 10000)
        self.server_reply = False
        self.servers = list(servers_set)
        self.send_seq_no = 0
        self.recv_seq_no = 1
        self.client_name = 'Client.'+bank_name+'.'+str(client_conf[bank_name][index]['index'])
        self.head = servers[0]
        self.tail = servers[-1]

    def generate_uid(bank_name, account_no):
        """Generate an uid for the transaction
        """
        self.seq_no = self.seq_no + 1
        return bank_name + '.' + str(account_no) + '.' + str(self.id) + '.'+str(seq_no)

    def send_request(request):
        """ Request are of the form (('req_type', (UID, Acct. No, Amount*)))
        """

        retries = 0
        while retries <= num_retransmits:
            #Choose server based on request Type
            #if servers == {}: return output(client_name, 'Servers Unavailable')
            send_server = head
            if request[0] == 'getBalance':
                send_server = tail

            self.send_seq_no += 1  
            output(client_name, 'SENT:',self.send_seq_no,':', request,' request to ',str(send_server))
            if (msg_loss_freq and (self.send_seq_no % msg_loss_freq == 0)):
                output(client_name, "Simulate Msg loss of request", request)
            else:
                send(request, to=send_server)
            if await(self.server_reply):
                self.server_reply = False
                break
            elif timeout(client_time_out):
                retries += 1
                if retries > num_retransmits:
                    output(client_name, "Giving Up on the servers")
                    break
                output(client_name, "Timed out waiting for a reply back from server, Retrying ", retries)

    def get_random_req(client_conf):
        x= random.uniform(0,1)
        for request_type,probability in client_conf['prob']:
            if x<probability:
                    break
            x=x-probability
        
        account = random.randint(account_no-100, account_no+100)
        sent_uid = generate_uid(bank_name, account)
        req = [sent_uid, account]
        if request_type != 'getBalance':
                req.append(random.randint(100,1000))
        return request_type, tuple(req)
        
    def main():
        output('### Client',client_name,self.id,' firing up...')

        if client_seq:
            for i,req in enumerate(client_seq):
                sleep(random.randint(0,3))
                output(client_name, '### Running request number ', i+1)
                send_request(req)
        elif client_prob_conf:
            random.seed(client_prob_conf[index]['seed'])
            for i in range(client_prob_conf[index]['numReq']):
                sleep(random.randint(0,3))
                output(client_name, '### Running request number ', i+1)
                req = get_random_req(client_prob_conf[index])
                send_request(req)

    def receive(msg=('response',req), from_=server):
        self.recv_seq_no += 1  
        output(client_name, '#RECEIVED:',self.recv_seq_no,': response ', req, ' from server ', server)
        if (msg_loss_freq and (self.recv_seq_no % msg_loss_freq == 0)):
            output(client_name, "Simulate Msg loss of response", req)
        else:
            self.server_reply = True

    def receive(msg=('update_head',req), from_=master):
        output(client_name, '#RECEIVED:', req, ' from Master ', master)
        head = req
        output(client_name, 'New head =', req)
    
    def receive(msg=('update_tail',req), from_=master):
        output(client_name, '#RECEIVED:', req, ' from Master ', master)
        tail = req
        output(client_name, 'New tail =', req)

class Master(process):
    def setup(servers_set, clients_set, master_interval=5):
        self.servers = list(servers_set)
        self.clients = list(clients_set)
        self.master_name = "MASTER:"
        self.heartbeat_list = []
        init_heartbeat_list(self.servers)
        self.add_waitlist = []
        self.heartbeat_waitlist = []
        self.new_hb_list = []

    def main():
        output('### Master',master_name, self.id,' firing up...')
        
        while True:
            --l
            if await(False):
                pass
            elif timeout(master_interval):
                output('### Master',master_name, self.id,'Processing Heartbeats.')
                process_heartbeats()

    def process_heartbeats():
        head_failed = tail_failed = False
        last_index = len(self.heartbeat_list)-1
        output(master_name, "Hearbeat List = ", self.heartbeat_list)

        curr_tail = self.heartbeat_list[last_index][0]
        
        #Find the new Head and Tail
        new_head = None
        new_tail = None
        for i,elem in enumerate(list(self.heartbeat_list)):
            if (new_head == None):
                if (elem[1] != 0):
                    new_head = elem[0]
            if (elem[1] != 0):
                new_tail = elem[0]
        
        for i,elem in enumerate(list(self.heartbeat_list)):
            if (elem[1] == 0):
                output(master_name, "process_heartbeats:",  elem[0], "failed, informing servers")
                for server in servers:
                    if server!= elem[0]:
                        serv_fail = ('server_fail', (elem[0], new_head, new_tail)) 
                        output(master_name,'SENT:', serv_fail, ' to', server)
                        send(serv_fail, to=server)
                
                if(i == 0):
                    head_failed = True
                elif(i == last_index):
                    tail_failed = True

                #Remove it from the servers list as well as the heartbeat list
                if elem in self.heartbeat_list:
                    self.heartbeat_list.remove(elem)
                    self.servers.remove(elem[0])

        #Reset Counters to Zero
        for entry in self.heartbeat_list:
            entry[1] = 0
        
        output(master_name, "Hearbeat List of New Servers = ", self.new_hb_list)
        for i,elem in enumerate(list(self.new_hb_list)):
            if (elem[1] == 0):
                output(master_name, "Curr Tail = ", curr_tail, "New Tail = ", new_tail, type(new_tail))
                #Tell orig tail of new tail's failure
                if (curr_tail == new_tail):
                    new_tail_fail_req = ('new_tail_fail', elem[0])
                    output(master_name,'SENT:', new_tail_fail_req, ' to', curr_tail)
                    send(new_tail_fail_req, to=curr_tail)
                self.new_hb_list.remove(elem)
                
        #Reset Counters to Zero
        for entry in self.new_hb_list:
            entry[1] = 0
        
        if(head_failed):
            for client in clients:
                update_head = ('update_head', servers[0])
                output(master_name,'SENT:',update_head, ' to', client)
                send(update_head, to=client)

        if(tail_failed):
            if (self.new_hb_list != []):
                #If Add server in Progress and the Current tail failed
                #restart the syncing
                purge_req = ('purge_req', "Purge History") 
                output(master_name,'SENT:', purge_req, ' to', self.new_hb_list[0][0])
                send(purge_req, to=self.new_hb_list[0][0])
                
                #Inform the New Tail to Start Syncing its History with 
                #the new server
                sync_req = ('sync_new_tail', self.new_hb_list[0][0]) 
                output(master_name,'SENT:', sync_req, ' to', self.servers[-1])
                send(sync_req, to=self.servers[-1])
                
            for client in clients:
                update_tail = ('update_tail', servers[-1])
                output(master_name,'SENT:',update_tail, ' to', client)
                send(update_tail, to=client)
        
    def init_heartbeat_list(servers):
        """Initialize the Heartbeat Counter List indexed by server id
        """
        for elem in servers:
            self.heartbeat_list.append([elem, 0])

    def update_heartbeats(serv):
        """Increase the Count of Heartbeat Message from this server by 1
        """
        for elem in self.heartbeat_list:
            if (elem[0] == serv):
                elem[1] +=1
                return

        output(master_name, 'self.new_hb_list = ', self.new_hb_list)
       
        if serv not in list(zip(*[[(None, None)] if self.new_hb_list == [] else self.new_hb_list][0]))[0]:
            output(master_name, 'NEW SERVER:', serv)
            self.new_hb_list.append([serv, 1])
            
            #Inform The current server List to the new Server
            serv_list = ('servers_list', servers) 
            output(master_name,'SENT:', serv_list, ' to', serv)
            send(serv_list, to=serv)
            
            #Inform Current Tail to Start Syncing
            sync_req = ('sync_new_tail', serv) 
            output(master_name,'SENT:', sync_req, ' to', self.servers[-1])
            send(sync_req, to=self.servers[-1])
        else:
            for elem in self.new_hb_list:
                if (elem[0] == serv):
                    elem[1] +=1
                    return

    def receive(msg=('heartbeat',), from_=server):
        output(master_name, '#RECEIVED: Heartbeat message from server ', server)
        update_heartbeats(server)

    def receive(msg=('new_tail_ready',), from_=server):
        output(master_name, '#RECEIVED: New Tail Ready from server ', server)
        #Send Update Tail message to All servers
        for servs in self.servers:
            add_new_tail = ('add_new_tail', server)
            output(master_name,'SENT:',add_new_tail, ' to', servs)
            send(add_new_tail, to=servs)

        #Move from waitlist to servers list.
        self.servers.append(server)
        self.heartbeat_list.append([server, 1])

        #Remove from wait_list
        entries = [item for item in self.new_hb_list if item[0] == server]
        if entries:
            for entry in entries:
                self.new_hb_list.remove(entry)

        #Inform Clients of the New Tail
        for client in self.clients:
            update_tail = ('update_tail', self.servers[-1])
            output(master_name,'SENT:',update_tail, ' to', client)
            send(update_tail, to=client)

def main():
    config(channel = "fifo")
    
    for name, conf in server_conf.items():
        num_banks_in_chain = len(conf) 
        
        print("Num banks in chain = ", num_banks_in_chain)

        servers = new(Server, num = num_banks_in_chain)
        num_clients = len(client_conf[name])
        
        clients = new(Client, num = num_clients)

        master = new(Master, num = 1)

        for i,c in enumerate(clients): setup(c, [servers, name, i, master])
        
        for i,s in enumerate(servers): setup(s, [servers, name, i, master])
        
        print('Spawner Process: SERVER PROCESSES for', name, 'ARE')
        for i,e in enumerate(servers):
                print(i, e)
                print("Configuration:\n", server_conf[name][i])

        start(servers)
        print('\nSpawner Process: CLIENT PROCESSES for', name, 'ARE')
        for i,e in enumerate(clients):
            print(i, e)
            print("Configuration:\n", client_conf[name][i])
        start(clients)

        setup(master, [servers, clients, master_conf['master_interval']])
        start(master)
 
